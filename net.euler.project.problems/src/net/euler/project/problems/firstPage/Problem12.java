package net.euler.project.problems.firstPage;

/**
 * Created by jetzen on 22.12.14.
 */

import java.util.HashMap;
import java.util.HashSet;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 {
    public static void main(String[] args) {
        long triangleNumber=0;
        for(int i=1;i<Integer.MAX_VALUE;i++) {
            triangleNumber=triangleNumber+i;
            int numberOfDivisors=getNumberOfDivisors(triangleNumber);
            if(numberOfDivisors>500){
                System.out.println("first item with over 500 Divisors is: "+triangleNumber);
                break;
            }
        }
    }

    private static int getNumberOfDivisors(long number){
        int numberOfDivisors=0;
        HashSet<Integer> div=new HashSet<>();
        for(int i=1;i<Math.floor(Math.sqrt(number));i++){
            if(number%i==0){
                if(!div.contains((int)number/i)){
                    div.add(i);
                    if((number/i)==i){
                        numberOfDivisors++;
                    }
                    else{
                        numberOfDivisors+=2;
                    }
                }
            }
        }
        return numberOfDivisors;
    }
}
